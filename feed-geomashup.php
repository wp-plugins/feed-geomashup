<?php
/*
Plugin Name: FeedGeoMashup
Plugin URI: http://wordpress.blogs.wesleyan.edu/plugins/feedgeomashup/
Description: Let two great plugins play great together. Use FeedWordPress to aggregate geodata generated by GeoMashup. 
Version: 2.0
Author: Kevin Wiliarty
Author URI: http://open.pages.kevinwiliarty.com/
*/

/* 
Copyright 2010  Wesleyan University 

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *
 * Create the admin interface to integrate with FeedWordPress
 *
 */

//hook into the metabox creation function for the 'Posts' page in the
//FeedWordPress Admin UI
add_action(
	/*hook=*/ 'feedwordpress_admin_page_posts_meta_boxes' ,
	/*function=*/ 'add_meta_box_feedgeomashup_options' ,
	/*priority=*/ 100 ,
	/*arguments=*/ 1
);
//hook into the settings-saving function for the 'Posts' page
add_action(
	/*hook=*/ 'feedwordpress_admin_page_posts_save' ,
	/*function=*/ 'feedgeomashup_options_save' ,
	/*priority=*/ 100 ,
	/*arguments=*/ 2
);

//create an options area in the FeedWordPress Admin UI
function add_meta_box_feedgeomashup_options( $page ) {
	add_meta_box(
		/*id=*/ 'feedgeomashup_options_box' ,
		/*title=*/ __('Feed GeoMashup Options') ,
		/*callback=*/ 'add_feedgeomashup_options_box' ,
		/*page=*/ $page->meta_box_context() ,
		/*context=*/ $page->meta_box_context()
	);
} /* add_meta_box_feedgeomashup_options() */

//function to create the contents of the meta box
function add_feedgeomashup_options_box( $page, $box = NULL ) {
	$setting = array(
		'feedgeomashup_posts' => array(
			'all'  => __('All Posts') ,
			'mapped' => __('Mapped Posts Only') ,
		),
	);

	if (!$page->for_feed_settings()) :
		$feedgeomashup_posts = get_option( 'feedwordpress_feedgeomashup_posts' );
	endif;
?>
<table class="edit-form narrow">
<tr><th scope="row">Posts to syndicate:</th>
<td><?php
$params = array(
	'setting-default' => 'default',
	'global-setting-default' => 'all',
	'default-input-value' => 'default',
);
$page->setting_radio_control(
	'feedgeomashup posts', 'feedgeomashup_posts',
	$setting['feedgeomashup_posts'], $params
);
?>

</td></tr>
</table>
<?php
} /* add_feedgeomashup_options_box() */

//function to save the settings
function feedgeomashup_options_save( $params , $page) {
	if (!$page->for_feed_settings()) :
		update_option( 'feedwordpress_feedgeomashup_posts' , $_REQUEST['feedgeomashup_posts']);
	else :
		$page->link->settings['feedgeomashup posts'] = $_REQUEST['feedgeomashup_posts'];
	endif;
}

//handle unmapped posts
function feedwordpress_unmapped_posts( $posts , $link ) {

	//get the site-wide preference for keeping all or only mapped posts
	$sitewide_setting = get_option( 'feedwordpress_feedgeomashup_posts' );
	if ( $sitewide_setting  == 'mapped' ) :
		$keep_posts = 'mapped';
	//keep all posts is the default
	else :
		$keep_posts = 'all';
	endif;

	//override with the individual feed setting if appropriate
	$feed_setting = $link->settings['feedgeomashup posts'];
	if ( $feed_setting == 'mapped' ) :
		$keep_posts = 'mapped';
	elseif ($feed_setting == 'all' ) :
		$keep_posts = 'all';
	endif;

	//if the setting works out to 'all', just return the array
	if ( $keep_posts == 'all' ) {
		return $posts;
	}

	//otherwise, go through the array of items
	$link->magpie->originals = $posts;

	if ( is_array( $posts )) :
		foreach ( $posts as $key => $item ) :
			$post = new SyndicatedPost( $item , $link );	
			$post_point = $post->item['http://www.georss.org/georss']['point']; 
			if ( !$post_point ) :
				unset( $posts[$key] );
			endif;
		endforeach;
	endif;

	return $posts;
}

//hook into syndicated_feed_items
add_filter( 'syndicated_feed_items' , 'feedwordpress_unmapped_posts' , 100 , 2 );

//pass geo-data from FeedWordPress to GeoMashup
function feed_geomashup( $post_ID , $syndicated_item ) {

	//pull the location out of the RSS
	$my_point = $syndicated_item->item['http://www.georss.org/georss']['point'];

	//if the post has no geodata
	if( !$my_point ) { 
		return; 
	}

	//put the coordinates in an array for geo_mashup
	$my_points = explode( ' ' , $my_point );
	$mylat = $my_points[0];
	$mylng = $my_points[1];
	$location['lat'] = $mylat;
	$location['lng'] = $mylng;

	//set the object name for geo_mashup
	$object_name = 'post';

	//if the GeoMashup plugin is active
	if( method_exists( 'GeoMashupDB' , 'set_object_location' )) {
		//process the location information for the current post
		GeoMashupDB::set_object_location( $object_name , $post_ID , $location );
	}
}

//run the feed_geo_mashup function for new and updated posts
add_action( 'post_syndicated_item' , 'feed_geomashup' , 10 , 2 );
add_action( 'update_syndicated_item' , 'feed_geomashup' , 10 , 2 );

?>
